package src.othertest.arithmetic;

/**
 * 贪心算法
 */
public class GreedyAlgorithm {


    /**
     * 霍夫曼编码（Huffman Coding）、Prim 和 Kruskal 最小生成树算法, Dijkstra 单源最短路径算法
     *
     * 针对一组数据，我们定义了限制值和期望值，希望从中选出几个数据，在满足限制值的情况下，期望值最大
     *
     *
     * 1.100kg 物品的背包装豆子，单位质量最高价值的放入
     * 2.但用贪心算法解决问题的思路，并不总能给出最优解，eg：图找最短路径（路径中边的权值和最小）
     * 3. m 个糖果和 n 个孩子分：找出对糖果大小需求最小的，然后发给他剩下的糖果中能满足他的最小的糖果
     * 4.我们现在要用这些钱来支付 K 元，最少要用多少张纸币
     * 5.按照起始端点从小到大的顺序对这 n 个区间排序， 我们每次选择的时候，选左端点跟前面的已经覆盖的区间不重合的，右端点又尽量小的
     *
     *
     *
     */


    /**
     *
     *
     *
     * 贪心算法的背包问题，数据是可以分的
     *
     * 溯算法的背包问题，数据是不可以分的
     *
     *
     *
     *
     *
     */








}
